第六章 数字和日期
1.数字
（1）特殊数字：+Infinity, -Infinity、NaN（非数字）。
（2）四种数字类型：十进制、八进制、2进制、十六进制。
（3）二进制：以“0b”或者“0B”开头；八进制：以“0”开始；十六进制：以“0x”或者“0X”开头。
2.数字对象
（1）常用数字对象：Number.MAX_VALUE、Number.MIN_VALUE、Number.POSITIVE_INFINITY、Number.NEGATIVE_INFINITY、Number.NaN。
（2）数字方法：Number.parseFloat()、Number.parseInt()、Number.isFinite()、Number.isInteger()、Number.isNaN()
3.数学对象Math
（1）数学对象方法：Math.abs()绝对值、floor()小于或等于当前数字的最大数字、 ceil()大于或等于当前数字的最小数字、random()随机数
4.日期对象
1.var dateObjectName = new Date([parameters])中parameters语法
（1）为空：创建当前日期和时间。
（2）字符串表达："Month day, year hours:minutes:seconds."，例如ar Xmas95 = new Date("December 25, 1995 13:30:00")。
（3）数字表达：year, month, and day，例如Date(1995, 11, 25)。
（4）完整数字表达：year, month, day, hour, minute, and seconds，例如new Date(1995, 11, 25, 9, 30, 0)。
（5）常用方法：getFullYear()，返回year、Date.parse、getHours、getMinutes、getSeconds。

第七章 字符串格式化
1.字符串方法
（1）chartAt、charCodeAt、codePointAt，返回指定位置的字符或字符编码。
（2）indexOf、latIndexOf。
（3）startsWidth、endsWidth、includes。以指定字符串开始或结尾，包含指定字符。
（4）concat，结合两个字符串。
（5）split，分隔成数组。
（6）抽取部分字符串。
（7）match、replace、search，正则表达式操作。
（8）toLowerCase、toUpperCase。
（9）trime，在开始和结尾去掉空白。
2.多行排列
（1）使用\n换行：console.log("string text line 1\n\
string text line 2");
（2）使用` `多行显示：console.log(`string text line 1
string text line 2`);
（3）字符串内嵌表达式：${expression}，例如：
var a = 5;
var b = 10;
console.log(`Fifteen is ${a + b} and\nnot ${2 * a + b}.`);
// "Fifteen is 15 and
// not 20."

第八章 数组集合
1.数组对象
（1）创建数组
var arr = new Array(element0, element1, ..., elementN);
var arr = Array(element0, element1, ..., elementN);
var arr = [element0, element1, ..., elementN];
（2）初始化指定数组长度：var arr = Array(42); 
（3）添加属性：arr[3.4]将会为arr添加一个名字为3.4的属性
var arr = [];
arr[3.4] = "Oranges";
console.log(arr.length);                // 0
console.log(arr.hasOwnProperty(3.4));   // true
2.迭代数组
（1）for：for (var i = 0; i < colors.length; i++)
（2）forEach：
var colors = ['red', 'green', 'blue'];
colors.forEach(function(color) {
  console.log(color);
});
3.数组方法
（1）concat：组合两个数组，
var myArray = new Array("1", "2", "3");
myArray = myArray.concat("a", "b", "c"); 
// myArray is now ["1", "2", "3", "a", "b", "c"]
（2）join：将数组转换为字符串，
var myArray = new Array("Wind", "Rain", "Fire");
var list = myArray.join(" - "); // list is "Wind - Rain - Fire"
（3）push：将一个或多个元素添加到数组最后。
var myArray = new Array("1", "2");
myArray.push("3"); // myArray is now ["1", "2", "3"]
（4）pop：将数组最后最后一个元素移除并返回。
var myArray = new Array("1", "2", "3");
var last = myArray.pop(); 
// myArray is now ["1", "2"], last = "3“
（5）shift：将数组第一个元素移除并返回。
var myArray = new Array ("1", "2", "3");
var first = myArray.shift(); 
// myArray is now ["2", "3"], first is "1"
（6）unshift：添加一个或多个元素到数组的头部，并返回最新数组。
var myArray = new Array ("1", "2", "3");
myArray.unshift("4", "5"); 
// myArray becomes ["4", "5", "1", "2", "3"]
（7）slice：提取数组的部分，并返回新数组。
var myArray = new Array ("a", "b", "c", "d", "e");
myArray = myArray.slice(1, 4); // starts at index 1 and extracts all elements
                               // until index 3, returning [ "b", "c", "d"]
（8）reverse：转换数组，第一个变成最后一个，最后一个变成第一个。
var myArray = new Array ("1", "2", "3");
myArray.reverse(); 
// transposes the array so that myArray = [ "3", "2", "1" ]
（9）sort简单排序：无参数。
var myArray = new Array("Wind", "Rain", "Fire");
myArray.sort(); 
// sorts the array so that myArray = [ "Fire", "Rain", "Wind" ]
（10）sort自定义排序：需要传递一个回调函数作为参数，对比两个元素排序。
var sortFn = function(a, b){
  if (a[a.length - 1] < b[b.length - 1]) return -1;
  if (a[a.length - 1] > b[b.length - 1]) return 1;
  if (a[a.length - 1] == b[b.length - 1]) return 0;
}
myArray.sort(sortFn); 
// sorts the array so that myArray = ["Wind","Fire","Rain"]
（11）indexOf：查找某个元素在数组中的索引。
var a = ['a', 'b', 'a', 'b', 'a'];
console.log(a.indexOf('b')); // logs 1
// Now try again, starting from after the last match
console.log(a.indexOf('b', 2)); // logs 3
console.log(a.indexOf('z')); // logs -1, because 'z' was not found
（12）lastIndexOf：从数组尾部开始查找。
var a = ['a', 'b', 'c', 'd', 'a', 'b'];
console.log(a.lastIndexOf('b')); // logs 5
// Now try again, starting from before the last match
console.log(a.lastIndexOf('b', 4)); // logs 1
console.log(a.lastIndexOf('z')); // logs -1
（13）forEach：遍历元素。
var a = ['a', 'b', 'c'];
a.forEach(function(element) { console.log(element);} ); 
（14）map：根据回调函数返回一个新的数组。
var a1 = ['a', 'b', 'c'];
var a2 = a1.map(function(item) { return item.toUpperCase(); });
console.log(a2); // logs A,B,C
（15）filter：过滤元素。
var a1 = ['a', 10, 'b', 20, 'c', 30];
var a2 = a1.filter(function(item) { return typeof item === 'number'; });
console.log(a2); // logs 10,20,30
（16）every：所有元素匹配。
function isNumber(value){
  return typeof value === 'number';
}
var a1 = [1, 2, 3];
console.log(a1.every(isNumber)); // logs true
var a2 = [1, '2', 3];
console.log(a2.every(isNumber)); // logs false
（17）some：至少一个匹配。
function isNumber(value){
  return typeof value === 'number';
}
var a1 = [1, 2, 3];
console.log(a1.some(isNumber)); // logs true
var a2 = [1, '2', 3];
console.log(a2.some(isNumber)); // logs true
var a3 = ['1', '2', '3'];
console.log(a3.some(isNumber)); // logs false
第九章 字典集合
1.Maps
（1）Map对象：字典对象，使用[Key/Value]形式。例如：
var sayings = new Map();
sayings.set("dog", "woof");
sayings.set("cat", "meow");
sayings.set("elephant", "toot");
sayings.size; // 3
sayings.get("fox"); // undefined
sayings.has("bird"); // false
sayings.delete("dog");

for (var [key, value] of sayings) {
  console.log(key + " goes " + value);
}
（2）Map对象方法：set、size、get、has、delete。
（3）遍历Map方法：使用for... of遍历。例如：
for (var [key, value] of sayings) {
  console.log(key + " goes " + value);
}
2.Sets
（1）Set对象：数据集合，按照插入顺序迭代值，一个值只能插入一次。例如：
var mySet = new Set();
mySet.add(1);
mySet.add("some text");
mySet.add("foo");

mySet.has(1); // true
mySet.delete("foo");
mySet.size; // 2

for (let item of mySet) console.log(item);
// 1
// "some text"
（2）Set和Array转换：Set转换为Array使用Array.from(mySet)，Array转换为Set使用mySet2 = new Set([1,2,3,4]);

第十章 操作对象
1.对象和属性
（1）对象属性的两种访问形式：objectName.propertyName、object[prpertyName]。例如：
var myCar = new Object();
myCar.make = "Ford";
//或者 myCar["make"] = “Ford”;
（2）迭代对象属性：使用(for...in)迭代对象的所有属性。例如：
function showProps(obj, objName) {
  var result = "";
  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      result += objName + "." + i + " = " + obj[i] + "\n";
    }
  }
  return result;
}
showProps(myCar, "myCar") 
2、创建对象
（1）使用对象初始化器。例如：
var obj = { property_1:   value_1,   // property_# may be an identifier...
            2:            value_2,   // or a number...
            // ...,
            "property n": value_n }; // or a string
（2）使用constructor 构造函数。例如：
function Car(make, model, year) {
  this.make = make;
  this.model = model;
  this.year = year;
}
创建对象：var mycar = new Car("Eagle", "Talon TSi", 1993);
（3）使用Ojbect.create创建对象：例如使用对象初始化器创建一个变量，然后Object.create()重新创建一个新的具有相同属性的对象。例如：
// Animal properties and method encapsulation
var Animal = {
  type: "Invertebrates", // Default value of properties
  displayType : function() {  // Method which will display type of Animal
    console.log(this.type);
  }
}

// Create new animal type called animal1 
var animal1 = Object.create(Animal);
animal1.displayType(); // Output:Invertebrates

// Create new animal type called Fishes
var fish = Object.create(Animal);
fish.type = "Fishes";
fish.displayType(); // Output:Fishes
3.为对象使用this关键字
（1）form表单中的this：this关键字表示的是当前对象的父表单。例如：
<form name="myForm">
<p><label>Form name:<input type="text" name="text1" value="Beluga"></label>
<p><input name="button1" type="button" value="Show Form Name"
     onclick="this.form.text1.value = this.form.name">
</p>
</form>
4.定义getters和setters
（1）使用Object.defineProperty为对象定义属性：例如我们为时间对象Date定义year属性。属性定义后所有创建的Date对象都拥有该属性。例如：
var d = Date.prototype;
Object.defineProperty(d, "year", {
  get: function() { return this.getFullYear() },
  set: function(y) { this.setFullYear(y) }
});
（2）使用Object.defineProperty为对象已经存在的属性定义get和set：
var o = { a:0 }

Object.defineProperties(o, {
    "b": { get: function () { return this.a + 1; } },
    "c": { set: function (x) { this.a = x / 2; } }
});

o.c = 10 // Runs the setter, which assigns 10 / 2 (5) to the 'a' property
console.log(o.b)
